// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
const tg = window.Telegram.WebApp;
tg.expand();

// –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let userData = {
    id: tg.initDataUnsafe.user?.id || 0,
    name: tg.initDataUnsafe.user?.first_name || "–ì–æ—Å—Ç—å",
    avatar: tg.initDataUnsafe.user?.photo_url || "",
    balance: 1000,
    cases: {
        common: 3,
        rare: 1,
        epic: 0,
        legendary: 0
    }
};

// –¢–∏–ø—ã –∫–µ–π—Å–æ–≤
const caseTypes = {
    common: {
        name: "–û–±—ã—á–Ω—ã–π –∫–µ–π—Å",
        price: 50,
        emoji: "üéÅ",
        rewards: [
            { amount: 10, chance: 40 },
            { amount: 20, chance: 30 },
            { amount: 50, chance: 20 },
            { amount: 100, chance: 10 }
        ]
    },
    rare: {
        name: "–†–µ–¥–∫–∏–π –∫–µ–π—Å",
        price: 100,
        emoji: "üîÆ",
        rewards: [
            { amount: 50, chance: 30 },
            { amount: 100, chance: 25 },
            { amount: 200, chance: 20 },
            { amount: 500, chance: 15 },
            { amount: 1000, chance: 10 }
        ]
    },
    epic: {
        name: "–≠–ø–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å",
        price: 200,
        emoji: "üíé",
        rewards: [
            { amount: 100, chance: 25 },
            { amount: 200, chance: 20 },
            { amount: 500, chance: 20 },
            { amount: 1000, chance: 15 },
            { amount: 2000, chance: 10 },
            { amount: 5000, chance: 10 }
        ]
    },
    legendary: {
        name: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∫–µ–π—Å",
        price: 500,
        emoji: "üèÜ",
        rewards: [
            { amount: 500, chance: 20 },
            { amount: 1000, chance: 20 },
            { amount: 2000, chance: 15 },
            { amount: 5000, chance: 15 },
            { amount: 10000, chance: 15 },
            { amount: 20000, chance: 10 },
            { amount: 50000, chance: 5 }
        ]
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    document.getElementById('user-name').textContent = userData.name;
    document.getElementById('user-balance').textContent = `–ë–∞–ª–∞–Ω—Å: ${userData.balance} –º–æ–Ω–µ—Ç`;
    
    if (userData.avatar) {
        document.getElementById('user-avatar').src = userData.avatar;
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–µ–π—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    renderUserCases();
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞–≥–∞–∑–∏–Ω
    renderShop();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    setupModal();
});

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–µ–π—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function renderUserCases() {
    const container = document.getElementById('cases-container');
    container.innerHTML = '';
    
    for (const [type, count] of Object.entries(userData.cases)) {
        if (count > 0) {
            const caseInfo = caseTypes[type];
            const caseElement = document.createElement('div');
            caseElement.className = 'case-item';
            caseElement.innerHTML = `
                <h3>${caseInfo.emoji} ${caseInfo.name}</h3>
                <p>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count}</p>
            `;
            caseElement.addEventListener('click', () => openCase(type));
            container.appendChild(caseElement);
        }
    }
    
    if (container.innerHTML === '') {
        container.innerHTML = '<p>–£ –≤–∞—Å –Ω–µ—Ç –∫–µ–π—Å–æ–≤. –ö—É–ø–∏—Ç–µ –∏—Ö –≤ –º–∞–≥–∞–∑–∏–Ω–µ!</p>';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
function renderShop() {
    const container = document.getElementById('shop-container');
    container.innerHTML = '';
    
    for (const [type, caseInfo] of Object.entries(caseTypes)) {
        const shopItem = document.createElement('div');
        shopItem.className = 'shop-item';
        shopItem.innerHTML = `
            <h3>${caseInfo.emoji} ${caseInfo.name}</h3>
            <p>–¶–µ–Ω–∞: ${caseInfo.price} –º–æ–Ω–µ—Ç</p>
            <p>–ù–∞–≥—Ä–∞–¥—ã: ${caseInfo.rewards.map(r => r.amount).join(', ')}</p>
            <button class="buy-button">–ö—É–ø–∏—Ç—å</button>
        `;
        
        shopItem.querySelector('.buy-button').addEventListener('click', (e) => {
            e.stopPropagation();
            buyCase(type);
        });
        
        container.appendChild(shopItem);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function setupModal() {
    const modal = document.getElementById('case-modal');
    const closeBtn = document.querySelector('.close');
    
    closeBtn.addEventListener('click', () => {
        modal.style.display = 'none';
    });
    
    window.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.style.display = 'none';
        }
    });
}

// –ü–æ–∫—É–ø–∫–∞ –∫–µ–π—Å–∞
function buyCase(type) {
    const caseInfo = caseTypes[type];
    
    if (userData.balance >= caseInfo.price) {
        userData.balance -= caseInfo.price;
        userData.cases[type] += 1;
        
        updateUI();
        alert(`–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ${caseInfo.name}!`);
    } else {
        alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
function openCase(type) {
    if (userData.cases[type] <= 0) return;
    
    const modal = document.getElementById('case-modal');
    const animation = document.getElementById('case-animation');
    const result = document.getElementById('case-result');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    modal.style.display = 'block';
    result.innerHTML = '';
    
    // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–µ–π—Å–æ–≤
    userData.cases[type] -= 1;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è
    const slots = animation.querySelectorAll('.slot-item');
    let spins = 0;
    const spinInterval = setInterval(() => {
        slots.forEach(slot => {
            const symbols = ['üé∞', 'üé≤', 'üéØ', 'üé≥', 'üéÆ', 'üí∞', 'üíé'];
            slot.textContent = symbols[Math.floor(Math.random() * symbols.length)];
        });
        
        spins++;
        if (spins > 10) {
            clearInterval(spinInterval);
            showCaseResult(type);
        }
    }, 100);
}

// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
function showCaseResult(type) {
    const caseInfo = caseTypes[type];
    const result = document.getElementById('case-result');
    
    // –í—ã—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
    const totalChance = caseInfo.rewards.reduce((sum, reward) => sum + reward.chance, 0);
    let random = Math.random() * totalChance;
    let winAmount = 0;
    
    for (const reward of caseInfo.rewards) {
        if (random <= reward.chance) {
            winAmount = reward.amount;
            break;
        }
        random -= reward.chance;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    userData.balance += winAmount;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result.innerHTML = `
        <h3>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h3>
        <p>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ <strong>${winAmount}</strong> –º–æ–Ω–µ—Ç!</p>
        <p>–í–∞—à –±–∞–ª–∞–Ω—Å: <strong>${userData.balance}</strong> –º–æ–Ω–µ—Ç</p>
    `;
    
    updateUI();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    document.getElementById('user-balance').textContent = `–ë–∞–ª–∞–Ω—Å: ${userData.balance} –º–æ–Ω–µ—Ç`;
    renderUserCases();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ Telegram
tg.BackButton.onClick(() => {
    tg.close();
});